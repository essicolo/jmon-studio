// Euclidean Rhythms Demo - Bjorklund algorithm examples
// Demonstrates JMON's improved Euclidean rhythm generation using proper Bjorklund algorithm

// Create different Euclidean rhythm patterns showcasing the Bjorklund algorithm
const kick = jm.generative.loops.euclidean(16, 4, [36], "Kick Pattern"); // 4/16 - basic kick pattern
const snare = jm.generative.loops.euclidean(16, 6, [38], "Snare Pattern"); // 6/16 - complex snare
const hihat = jm.generative.loops.euclidean(16, 8, [42], "Hi-hat Pattern"); // 11/16 - busy hi-hat
const bass = jm.generative.loops.euclidean(
  16,
  16,
  [36, 40, 43],
  "Bass Pattern",
);

// Define the audioGraph with Sampler nodes and effects routing
const audioGraph = [
  // Drum kit samplers - map samples to MIDI note numbers directly
  {
    id: "kickSampler",
    type: "Sampler",
    options: {
      urls: {
        36: "https://tonejs.github.io/audio/drum-samples/CR78/kick.mp3",
      },
      envelope: { enabled: true, attack: 0.001, release: 0.2 },
      maxPolyphony: 1,
    },
    target: "drumBus",
  },
  {
    id: "snareSampler",
    type: "Sampler",
    options: {
      urls: {
        38: "https://tonejs.github.io/audio/drum-samples/CR78/snare.mp3",
      },
      envelope: { enabled: true, attack: 0.001, release: 0.25 },
      maxPolyphony: 1,
    },
    target: "drumBus",
  },
  {
    id: "hihatSampler",
    type: "Sampler",
    options: {
      urls: {
        42: "https://tonejs.github.io/audio/drum-samples/CR78/hihat.mp3",
      },
      envelope: { enabled: true, attack: 0.001, release: 0.05 },
      maxPolyphony: 1, // Further reduce polyphony
    },
    target: "drumBus",
  },

  // Bass sampled instrument - map to actual MIDI notes used
  {
    id: "bassSampler",
    type: "Sampler",
    options: {
      urls: {
        36:
          "https://cdn.jsdelivr.net/gh/gleitz/midi-js-soundfonts/FluidR3_GM/electric_bass_finger-mp3/C2.mp3",
        40:
          "https://cdn.jsdelivr.net/gh/gleitz/midi-js-soundfonts/FluidR3_GM/electric_bass_finger-mp3/E2.mp3",
        43:
          "https://cdn.jsdelivr.net/gh/gleitz/midi-js-soundfonts/FluidR3_GM/electric_bass_finger-mp3/G2.mp3",
      },
      envelope: { enabled: true, attack: 0.01, release: 0.4 },
      maxPolyphony: 1, // Bass should be monophonic
    },
    target: "bassReverb",
  },

  // Effects and buses
  {
    id: "drumBus",
    type: "Compressor",
    options: { threshold: -18, ratio: 3, attack: 0.01, release: 0.2 },
    target: "masterLimiter",
  },
  {
    id: "bassReverb",
    type: "Reverb",
    options: { wet: 0.15, roomSize: 0.6 },
    target: "masterLimiter",
  },

  // Master limiter to prevent clipping
  {
    id: "masterLimiter",
    type: "Limiter",
    options: { threshold: -6, ratio: 20, attack: 0.003, release: 0.01 },
    target: "master",
  },

  // Master output
  { id: "master", type: "Destination", options: {} },
];

// Build tracks from euclidean patterns and attach the right Sampler via synthRef
const kickTracks = kick.toJMonSequences().map(({ synth, ...t }) => ({
  ...t,
  synthRef: "kickSampler",
  notes: t.notes.filter((note) =>
    note.pitch !== null && note.pitch !== undefined
  ),
}));
const snareTracks = snare.toJMonSequences().map(({ synth, ...t }) => ({
  ...t,
  synthRef: "snareSampler",
  notes: t.notes.filter((note) =>
    note.pitch !== null && note.pitch !== undefined
  ),
}));
const hihatTracks = hihat.toJMonSequences().map(({ synth, ...t }) => ({
  ...t,
  synthRef: "hihatSampler",
  notes: t.notes.filter((note) =>
    note.pitch !== null && note.pitch !== undefined
  ),
}));
const bassTracks = bass.toJMonSequences().map(({ synth, ...t }) => ({
  ...t,
  synthRef: "bassSampler",
  notes: t.notes.filter((note) =>
    note.pitch !== null && note.pitch !== undefined
  ),
}));

// Create a combined composition with audioGraph and synthRef'd tracks
const euclideanComposition = {
  format: "jmon",
  version: "1.0.0",
  tempo: 120,
  timeSignature: "4/4",
  keySignature: "C",
  audioGraph, // Use the audioGraph defined above
  metadata: {
    title: "Euclidean Rhythms - Bjorklund Algorithm Demo",
    composer: "Generated by JMON",
    description:
      "Showcasing mathematically optimal rhythm distribution using Bjorklund algorithm with samples",
  },
  tracks: [
    ...kickTracks,
    ...snareTracks,
    ...hihatTracks,
    ...bassTracks,
  ],
};

// Display the main player
document
  .getElementById("player-container")
  .appendChild(jm.play(euclideanComposition, { autoplay: false }));

// Display the score using a single percussion staff for clarity
// (Kick/Snare/Hi-hat mapped to distinct staff positions)
document.getElementById("score-container").appendChild(
  jm.score(euclideanComposition, {
    abcOptions: {
      renderMode: "drums",
      measuresPerLine: 4,
      lineBreaks: [8, 16],
      quantizeBeats: 0.25,
      hideRests: true,
      showArticulations: false,
      percussionMap: { kick: 'C,,', snare: 'D,', hat: 'F', 'hi-hat': 'F', hihat: 'F' }
    },
  }),
);

// Create a simple plot container
const plotDiv = document.createElement("div");
plotDiv.id = "euclidean-plot";
plotDiv.style.cssText =
  `width: 100%; height: 500px; min-height: 400px; margin: 20px 0;`;
document.getElementById("score-container").after(plotDiv);

// Visualize with LoopVisualizer via the public API
await jm.visualization.loops.plotLoops(
  {
    "Kick Rhythm": kick.toJMonSequences()[0],
    "Snare Rhythm": snare.toJMonSequences()[0],
    "Hi-hat Rhythm": hihat.toJMonSequences()[0],
    "Bass Rhythm": bass.toJMonSequences()[0]
  },
  16,
  1/4,
  null,
  { container: 'euclidean-plot', title: 'Euclidean Rhythms' }
);
